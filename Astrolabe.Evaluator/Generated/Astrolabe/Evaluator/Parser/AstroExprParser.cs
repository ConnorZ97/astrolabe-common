//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/doolse/astrolabe/hvams/astrolabe-common/Astrolabe.Evaluator/AstroExpr.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Astrolabe.Evaluator.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AstroExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Number=4, LPAR=5, RPAR=6, LBRAC=7, RBRAC=8, MINUS=9, 
		PLUS=10, DOT=11, MUL=12, COMMA=13, LESS=14, MORE_=15, LE=16, GE=17, APOS=18, 
		QUOT=19, AND=20, OR=21, EQ=22, NE=23, Literal=24, Whitespace=25, Identifier=26;
	public const int
		RULE_main = 0, RULE_predicate = 1, RULE_expr = 2, RULE_primaryExpr = 3, 
		RULE_functionCall = 4, RULE_lambdaExpr = 5, RULE_unionExprNoRoot = 6, 
		RULE_filterExpr = 7, RULE_orExpr = 8, RULE_andExpr = 9, RULE_equalityExpr = 10, 
		RULE_relationalExpr = 11, RULE_additiveExpr = 12, RULE_multiplicativeExpr = 13, 
		RULE_mapExpr = 14, RULE_unaryExprNoRoot = 15, RULE_variableReference = 16;
	public static readonly string[] ruleNames = {
		"main", "predicate", "expr", "primaryExpr", "functionCall", "lambdaExpr", 
		"unionExprNoRoot", "filterExpr", "orExpr", "andExpr", "equalityExpr", 
		"relationalExpr", "additiveExpr", "multiplicativeExpr", "mapExpr", "unaryExprNoRoot", 
		"variableReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=>'", "'/'", "'$'", null, "'('", "')'", "'['", "']'", "'-'", "'+'", 
		"'.'", "'*'", "','", "'<'", "'>'", "'<='", "'>='", "'''", "'\"'", "'and'", 
		"'or'", "'='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Number", "LPAR", "RPAR", "LBRAC", "RBRAC", "MINUS", 
		"PLUS", "DOT", "MUL", "COMMA", "LESS", "MORE_", "LE", "GE", "APOS", "QUOT", 
		"AND", "OR", "EQ", "NE", "Literal", "Whitespace", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstroExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AstroExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AstroExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AstroExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AstroExprParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			expr();
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRAC() { return GetToken(AstroExprParser.LBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRAC() { return GetToken(AstroExprParser.RBRAC, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 2, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(LBRAC);
			State = 38;
			expr();
			State = 39;
			Match(RBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			orExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExprContext lambdaExpr() {
			return GetRuleContext<LambdaExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(AstroExprParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(AstroExprParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal() { return GetToken(AstroExprParser.Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(AstroExprParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_primaryExpr);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				lambdaExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45;
				variableReference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46;
				Match(LPAR);
				State = 47;
				expr();
				State = 48;
				Match(RPAR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 50;
				Match(Literal);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 51;
				Match(Number);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 52;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(AstroExprParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(AstroExprParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			variableReference();
			State = 56;
			Match(LPAR);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 83886648L) != 0)) {
				{
				State = 57;
				expr();
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 58;
					Match(COMMA);
					State = 59;
					expr();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 67;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LambdaExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExprContext lambdaExpr() {
		LambdaExprContext _localctx = new LambdaExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_lambdaExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			variableReference();
			State = 70;
			Match(T__0);
			State = 71;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionExprNoRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext filterExpr() {
			return GetRuleContext<FilterExprContext>(0);
		}
		public UnionExprNoRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionExprNoRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionExprNoRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionExprNoRootContext unionExprNoRoot() {
		UnionExprNoRootContext _localctx = new UnionExprNoRootContext(Context, State);
		EnterRule(_localctx, 12, RULE_unionExprNoRoot);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				filterExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public FilterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterExprContext filterExpr() {
		FilterExprContext _localctx = new FilterExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_filterExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			primaryExpr();
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 78;
				predicate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AstroExprParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AstroExprParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_orExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			andExpr();
			State = 86;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 82;
					Match(OR);
					State = 83;
					andExpr();
					}
					} 
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(AstroExprParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(AstroExprParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_andExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			equalityExpr();
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 90;
					Match(AND);
					State = 91;
					equalityExpr();
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(AstroExprParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(AstroExprParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NE() { return GetTokens(AstroExprParser.NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE(int i) {
			return GetToken(AstroExprParser.NE, i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_equalityExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			relationalExpr();
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 98;
					_la = TokenStream.LA(1);
					if ( !(_la==EQ || _la==NE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 99;
					relationalExpr();
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext[] additiveExpr() {
			return GetRuleContexts<AdditiveExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext additiveExpr(int i) {
			return GetRuleContext<AdditiveExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(AstroExprParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(AstroExprParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MORE_() { return GetTokens(AstroExprParser.MORE_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_(int i) {
			return GetToken(AstroExprParser.MORE_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(AstroExprParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(AstroExprParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(AstroExprParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(AstroExprParser.GE, i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_relationalExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			additiveExpr();
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 106;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 245760L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 107;
					additiveExpr();
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext[] multiplicativeExpr() {
			return GetRuleContexts<MultiplicativeExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext multiplicativeExpr(int i) {
			return GetRuleContext<MultiplicativeExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(AstroExprParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(AstroExprParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(AstroExprParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(AstroExprParser.MINUS, i);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_additiveExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			multiplicativeExpr();
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 114;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 115;
					multiplicativeExpr();
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapExprContext[] mapExpr() {
			return GetRuleContexts<MapExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapExprContext mapExpr(int i) {
			return GetRuleContext<MapExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(AstroExprParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(AstroExprParser.MUL, i);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_multiplicativeExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			mapExpr();
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 122;
					_la = TokenStream.LA(1);
					if ( !(_la==T__1 || _la==MUL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 123;
					mapExpr();
					}
					} 
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprNoRootContext[] unaryExprNoRoot() {
			return GetRuleContexts<UnaryExprNoRootContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprNoRootContext unaryExprNoRoot(int i) {
			return GetRuleContext<UnaryExprNoRootContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AstroExprParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AstroExprParser.DOT, i);
		}
		public MapExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapExprContext mapExpr() {
		MapExprContext _localctx = new MapExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_mapExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			unaryExprNoRoot();
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 130;
					Match(DOT);
					State = 131;
					unaryExprNoRoot();
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprNoRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionExprNoRootContext unionExprNoRoot() {
			return GetRuleContext<UnionExprNoRootContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(AstroExprParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(AstroExprParser.MINUS, i);
		}
		public UnaryExprNoRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExprNoRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExprNoRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprNoRootContext unaryExprNoRoot() {
		UnaryExprNoRootContext _localctx = new UnaryExprNoRootContext(Context, State);
		EnterRule(_localctx, 30, RULE_unaryExprNoRoot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MINUS) {
				{
				{
				State = 137;
				Match(MINUS);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			unionExprNoRoot();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__2);
			State = 146;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,149,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,54,8,3,1,4,1,4,1,4,1,4,1,4,5,4,61,8,4,10,
		4,12,4,64,9,4,3,4,66,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,3,6,76,8,6,1,
		7,1,7,3,7,80,8,7,1,8,1,8,1,8,5,8,85,8,8,10,8,12,8,88,9,8,1,9,1,9,1,9,5,
		9,93,8,9,10,9,12,9,96,9,9,1,10,1,10,1,10,5,10,101,8,10,10,10,12,10,104,
		9,10,1,11,1,11,1,11,5,11,109,8,11,10,11,12,11,112,9,11,1,12,1,12,1,12,
		5,12,117,8,12,10,12,12,12,120,9,12,1,13,1,13,1,13,5,13,125,8,13,10,13,
		12,13,128,9,13,1,14,1,14,1,14,5,14,133,8,14,10,14,12,14,136,9,14,1,15,
		5,15,139,8,15,10,15,12,15,142,9,15,1,15,1,15,1,16,1,16,1,16,1,16,0,0,17,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,4,1,0,22,23,1,0,14,17,
		1,0,9,10,2,0,2,2,12,12,149,0,34,1,0,0,0,2,37,1,0,0,0,4,41,1,0,0,0,6,53,
		1,0,0,0,8,55,1,0,0,0,10,69,1,0,0,0,12,75,1,0,0,0,14,77,1,0,0,0,16,81,1,
		0,0,0,18,89,1,0,0,0,20,97,1,0,0,0,22,105,1,0,0,0,24,113,1,0,0,0,26,121,
		1,0,0,0,28,129,1,0,0,0,30,140,1,0,0,0,32,145,1,0,0,0,34,35,3,4,2,0,35,
		36,5,0,0,1,36,1,1,0,0,0,37,38,5,7,0,0,38,39,3,4,2,0,39,40,5,8,0,0,40,3,
		1,0,0,0,41,42,3,16,8,0,42,5,1,0,0,0,43,54,3,8,4,0,44,54,3,10,5,0,45,54,
		3,32,16,0,46,47,5,5,0,0,47,48,3,4,2,0,48,49,5,6,0,0,49,54,1,0,0,0,50,54,
		5,24,0,0,51,54,5,4,0,0,52,54,5,26,0,0,53,43,1,0,0,0,53,44,1,0,0,0,53,45,
		1,0,0,0,53,46,1,0,0,0,53,50,1,0,0,0,53,51,1,0,0,0,53,52,1,0,0,0,54,7,1,
		0,0,0,55,56,3,32,16,0,56,65,5,5,0,0,57,62,3,4,2,0,58,59,5,13,0,0,59,61,
		3,4,2,0,60,58,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,66,
		1,0,0,0,64,62,1,0,0,0,65,57,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,
		5,6,0,0,68,9,1,0,0,0,69,70,3,32,16,0,70,71,5,1,0,0,71,72,3,4,2,0,72,11,
		1,0,0,0,73,76,5,26,0,0,74,76,3,14,7,0,75,73,1,0,0,0,75,74,1,0,0,0,76,13,
		1,0,0,0,77,79,3,6,3,0,78,80,3,2,1,0,79,78,1,0,0,0,79,80,1,0,0,0,80,15,
		1,0,0,0,81,86,3,18,9,0,82,83,5,21,0,0,83,85,3,18,9,0,84,82,1,0,0,0,85,
		88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,17,1,0,0,0,88,86,1,0,0,0,89,
		94,3,20,10,0,90,91,5,20,0,0,91,93,3,20,10,0,92,90,1,0,0,0,93,96,1,0,0,
		0,94,92,1,0,0,0,94,95,1,0,0,0,95,19,1,0,0,0,96,94,1,0,0,0,97,102,3,22,
		11,0,98,99,7,0,0,0,99,101,3,22,11,0,100,98,1,0,0,0,101,104,1,0,0,0,102,
		100,1,0,0,0,102,103,1,0,0,0,103,21,1,0,0,0,104,102,1,0,0,0,105,110,3,24,
		12,0,106,107,7,1,0,0,107,109,3,24,12,0,108,106,1,0,0,0,109,112,1,0,0,0,
		110,108,1,0,0,0,110,111,1,0,0,0,111,23,1,0,0,0,112,110,1,0,0,0,113,118,
		3,26,13,0,114,115,7,2,0,0,115,117,3,26,13,0,116,114,1,0,0,0,117,120,1,
		0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,25,1,0,0,0,120,118,1,0,0,0,121,
		126,3,28,14,0,122,123,7,3,0,0,123,125,3,28,14,0,124,122,1,0,0,0,125,128,
		1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,27,1,0,0,0,128,126,1,0,0,0,
		129,134,3,30,15,0,130,131,5,11,0,0,131,133,3,30,15,0,132,130,1,0,0,0,133,
		136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,29,1,0,0,0,136,134,1,0,
		0,0,137,139,5,9,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,
		141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,3,12,6,0,144,31,1,
		0,0,0,145,146,5,3,0,0,146,147,5,26,0,0,147,33,1,0,0,0,13,53,62,65,75,79,
		86,94,102,110,118,126,134,140
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Astrolabe.Evaluator.Parser
