//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/doolse/astrolabe/astrolabe-common/Astrolabe.Evaluator/AstroExpr.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Astrolabe.Evaluator.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AstroExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, Number=8, LPAR=9, 
		RPAR=10, LBRAC=11, RBRAC=12, MINUS=13, PLUS=14, DOT=15, MUL=16, COMMA=17, 
		LESS=18, MORE_=19, LE=20, GE=21, APOS=22, QUOT=23, AND=24, OR=25, EQ=26, 
		NE=27, False=28, True=29, Null=30, COND=31, NOT=32, Literal=33, Whitespace=34, 
		Identifier=35;
	public const int
		RULE_main = 0, RULE_expr = 1, RULE_primaryExpr = 2, RULE_functionCall = 3, 
		RULE_variableAssign = 4, RULE_letExpr = 5, RULE_lambdaExpr = 6, RULE_conditionExpression = 7, 
		RULE_orExpr = 8, RULE_andExpr = 9, RULE_equalityExpr = 10, RULE_relationalExpr = 11, 
		RULE_additiveExpr = 12, RULE_multiplicativeExpr = 13, RULE_mapExpr = 14, 
		RULE_filterExpr = 15, RULE_unaryExprNoRoot = 16, RULE_variableReference = 17;
	public static readonly string[] ruleNames = {
		"main", "expr", "primaryExpr", "functionCall", "variableAssign", "letExpr", 
		"lambdaExpr", "conditionExpression", "orExpr", "andExpr", "equalityExpr", 
		"relationalExpr", "additiveExpr", "multiplicativeExpr", "mapExpr", "filterExpr", 
		"unaryExprNoRoot", "variableReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "'let'", "'in'", "'=>'", "':'", "'/'", "'$'", null, "'('", 
		"')'", "'['", "']'", "'-'", "'+'", "'.'", "'*'", "','", "'<'", "'>'", 
		"'<='", "'>='", "'''", "'\"'", "'and'", "'or'", "'='", "'!='", "'false'", 
		"'true'", "'null'", "'?'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "Number", "LPAR", "RPAR", 
		"LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", "COMMA", "LESS", "MORE_", 
		"LE", "GE", "APOS", "QUOT", "AND", "OR", "EQ", "NE", "False", "True", 
		"Null", "COND", "NOT", "Literal", "Whitespace", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstroExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AstroExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AstroExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AstroExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AstroExprParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			expr();
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionExpressionContext conditionExpression() {
			return GetRuleContext<ConditionExpressionContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			conditionExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExprContext lambdaExpr() {
			return GetRuleContext<LambdaExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(AstroExprParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(AstroExprParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LetExprContext letExpr() {
			return GetRuleContext<LetExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal() { return GetToken(AstroExprParser.Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(AstroExprParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(AstroExprParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(AstroExprParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(AstroExprParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_primaryExpr);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				lambdaExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 43;
				variableReference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 44;
				Match(LPAR);
				State = 45;
				expr();
				State = 46;
				Match(RPAR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 48;
				letExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 49;
				Match(Literal);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 50;
				Match(Number);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 51;
				Match(False);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 52;
				Match(True);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 53;
				Match(Null);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 54;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(AstroExprParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(AstroExprParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			variableReference();
			State = 58;
			Match(LPAR);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 49123713924L) != 0)) {
				{
				State = 59;
				expr();
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 60;
					Match(COMMA);
					State = 61;
					expr();
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 69;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignContext variableAssign() {
		VariableAssignContext _localctx = new VariableAssignContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			variableReference();
			State = 72;
			Match(T__0);
			State = 73;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignContext[] variableAssign() {
			return GetRuleContexts<VariableAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignContext variableAssign(int i) {
			return GetRuleContext<VariableAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public LetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetExprContext letExpr() {
		LetExprContext _localctx = new LetExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_letExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__1);
			{
			State = 76;
			variableAssign();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 77;
				Match(COMMA);
				State = 78;
				variableAssign();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 84;
			Match(T__2);
			State = 85;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LambdaExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExprContext lambdaExpr() {
		LambdaExprContext _localctx = new LambdaExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			variableReference();
			State = 88;
			Match(T__3);
			State = 89;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COND() { return GetToken(AstroExprParser.COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionExpressionContext conditionExpression() {
			return GetRuleContext<ConditionExpressionContext>(0);
		}
		public ConditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionExpressionContext conditionExpression() {
		ConditionExpressionContext _localctx = new ConditionExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_conditionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			orExpr();
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 92;
				Match(COND);
				State = 93;
				expr();
				State = 94;
				Match(T__4);
				State = 95;
				conditionExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AstroExprParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AstroExprParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_orExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			andExpr();
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 100;
					Match(OR);
					State = 101;
					andExpr();
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(AstroExprParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(AstroExprParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_andExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			equalityExpr();
			State = 112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 108;
					Match(AND);
					State = 109;
					equalityExpr();
					}
					} 
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(AstroExprParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(AstroExprParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NE() { return GetTokens(AstroExprParser.NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE(int i) {
			return GetToken(AstroExprParser.NE, i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_equalityExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			relationalExpr();
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 116;
					_la = TokenStream.LA(1);
					if ( !(_la==EQ || _la==NE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 117;
					relationalExpr();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext[] additiveExpr() {
			return GetRuleContexts<AdditiveExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext additiveExpr(int i) {
			return GetRuleContext<AdditiveExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(AstroExprParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(AstroExprParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MORE_() { return GetTokens(AstroExprParser.MORE_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_(int i) {
			return GetToken(AstroExprParser.MORE_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(AstroExprParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(AstroExprParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(AstroExprParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(AstroExprParser.GE, i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_relationalExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			additiveExpr();
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 124;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 125;
					additiveExpr();
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext[] multiplicativeExpr() {
			return GetRuleContexts<MultiplicativeExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext multiplicativeExpr(int i) {
			return GetRuleContext<MultiplicativeExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(AstroExprParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(AstroExprParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(AstroExprParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(AstroExprParser.MINUS, i);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_additiveExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			multiplicativeExpr();
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 132;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 133;
					multiplicativeExpr();
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapExprContext[] mapExpr() {
			return GetRuleContexts<MapExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapExprContext mapExpr(int i) {
			return GetRuleContext<MapExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(AstroExprParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(AstroExprParser.MUL, i);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_multiplicativeExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			mapExpr();
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 140;
					_la = TokenStream.LA(1);
					if ( !(_la==T__5 || _la==MUL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 141;
					mapExpr();
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext[] filterExpr() {
			return GetRuleContexts<FilterExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext filterExpr(int i) {
			return GetRuleContext<FilterExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AstroExprParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AstroExprParser.DOT, i);
		}
		public MapExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapExprContext mapExpr() {
		MapExprContext _localctx = new MapExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_mapExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			filterExpr();
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 148;
					Match(DOT);
					State = 149;
					filterExpr();
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprNoRootContext[] unaryExprNoRoot() {
			return GetRuleContexts<UnaryExprNoRootContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprNoRootContext unaryExprNoRoot(int i) {
			return GetRuleContext<UnaryExprNoRootContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRAC() { return GetTokens(AstroExprParser.LBRAC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRAC(int i) {
			return GetToken(AstroExprParser.LBRAC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRAC() { return GetTokens(AstroExprParser.RBRAC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRAC(int i) {
			return GetToken(AstroExprParser.RBRAC, i);
		}
		public FilterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterExprContext filterExpr() {
		FilterExprContext _localctx = new FilterExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_filterExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			unaryExprNoRoot();
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 156;
					Match(LBRAC);
					State = 157;
					unaryExprNoRoot();
					State = 158;
					Match(RBRAC);
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprNoRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AstroExprParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(AstroExprParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AstroExprParser.PLUS, 0); }
		public UnaryExprNoRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExprNoRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExprNoRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprNoRootContext unaryExprNoRoot() {
		UnaryExprNoRootContext _localctx = new UnaryExprNoRootContext(Context, State);
		EnterRule(_localctx, 32, RULE_unaryExprNoRoot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294991872L) != 0)) {
				{
				State = 165;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294991872L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 168;
			primaryExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__6);
			State = 171;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,35,174,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,56,8,2,1,3,1,3,1,3,1,3,1,3,5,3,
		63,8,3,10,3,12,3,66,9,3,3,3,68,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,5,5,80,8,5,10,5,12,5,83,9,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,1,7,3,7,98,8,7,1,8,1,8,1,8,5,8,103,8,8,10,8,12,8,106,9,8,1,9,
		1,9,1,9,5,9,111,8,9,10,9,12,9,114,9,9,1,10,1,10,1,10,5,10,119,8,10,10,
		10,12,10,122,9,10,1,11,1,11,1,11,5,11,127,8,11,10,11,12,11,130,9,11,1,
		12,1,12,1,12,5,12,135,8,12,10,12,12,12,138,9,12,1,13,1,13,1,13,5,13,143,
		8,13,10,13,12,13,146,9,13,1,14,1,14,1,14,5,14,151,8,14,10,14,12,14,154,
		9,14,1,15,1,15,1,15,1,15,1,15,5,15,161,8,15,10,15,12,15,164,9,15,1,16,
		3,16,167,8,16,1,16,1,16,1,17,1,17,1,17,1,17,0,0,18,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,0,5,1,0,26,27,1,0,18,21,1,0,13,14,2,0,6,
		6,16,16,2,0,13,14,32,32,178,0,36,1,0,0,0,2,39,1,0,0,0,4,55,1,0,0,0,6,57,
		1,0,0,0,8,71,1,0,0,0,10,75,1,0,0,0,12,87,1,0,0,0,14,91,1,0,0,0,16,99,1,
		0,0,0,18,107,1,0,0,0,20,115,1,0,0,0,22,123,1,0,0,0,24,131,1,0,0,0,26,139,
		1,0,0,0,28,147,1,0,0,0,30,155,1,0,0,0,32,166,1,0,0,0,34,170,1,0,0,0,36,
		37,3,2,1,0,37,38,5,0,0,1,38,1,1,0,0,0,39,40,3,14,7,0,40,3,1,0,0,0,41,56,
		3,6,3,0,42,56,3,12,6,0,43,56,3,34,17,0,44,45,5,9,0,0,45,46,3,2,1,0,46,
		47,5,10,0,0,47,56,1,0,0,0,48,56,3,10,5,0,49,56,5,33,0,0,50,56,5,8,0,0,
		51,56,5,28,0,0,52,56,5,29,0,0,53,56,5,30,0,0,54,56,5,35,0,0,55,41,1,0,
		0,0,55,42,1,0,0,0,55,43,1,0,0,0,55,44,1,0,0,0,55,48,1,0,0,0,55,49,1,0,
		0,0,55,50,1,0,0,0,55,51,1,0,0,0,55,52,1,0,0,0,55,53,1,0,0,0,55,54,1,0,
		0,0,56,5,1,0,0,0,57,58,3,34,17,0,58,67,5,9,0,0,59,64,3,2,1,0,60,61,5,17,
		0,0,61,63,3,2,1,0,62,60,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,1,0,
		0,0,65,68,1,0,0,0,66,64,1,0,0,0,67,59,1,0,0,0,67,68,1,0,0,0,68,69,1,0,
		0,0,69,70,5,10,0,0,70,7,1,0,0,0,71,72,3,34,17,0,72,73,5,1,0,0,73,74,3,
		2,1,0,74,9,1,0,0,0,75,76,5,2,0,0,76,81,3,8,4,0,77,78,5,17,0,0,78,80,3,
		8,4,0,79,77,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,
		0,0,0,83,81,1,0,0,0,84,85,5,3,0,0,85,86,3,2,1,0,86,11,1,0,0,0,87,88,3,
		34,17,0,88,89,5,4,0,0,89,90,3,2,1,0,90,13,1,0,0,0,91,97,3,16,8,0,92,93,
		5,31,0,0,93,94,3,2,1,0,94,95,5,5,0,0,95,96,3,14,7,0,96,98,1,0,0,0,97,92,
		1,0,0,0,97,98,1,0,0,0,98,15,1,0,0,0,99,104,3,18,9,0,100,101,5,25,0,0,101,
		103,3,18,9,0,102,100,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,
		0,0,0,105,17,1,0,0,0,106,104,1,0,0,0,107,112,3,20,10,0,108,109,5,24,0,
		0,109,111,3,20,10,0,110,108,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,
		113,1,0,0,0,113,19,1,0,0,0,114,112,1,0,0,0,115,120,3,22,11,0,116,117,7,
		0,0,0,117,119,3,22,11,0,118,116,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,
		0,120,121,1,0,0,0,121,21,1,0,0,0,122,120,1,0,0,0,123,128,3,24,12,0,124,
		125,7,1,0,0,125,127,3,24,12,0,126,124,1,0,0,0,127,130,1,0,0,0,128,126,
		1,0,0,0,128,129,1,0,0,0,129,23,1,0,0,0,130,128,1,0,0,0,131,136,3,26,13,
		0,132,133,7,2,0,0,133,135,3,26,13,0,134,132,1,0,0,0,135,138,1,0,0,0,136,
		134,1,0,0,0,136,137,1,0,0,0,137,25,1,0,0,0,138,136,1,0,0,0,139,144,3,28,
		14,0,140,141,7,3,0,0,141,143,3,28,14,0,142,140,1,0,0,0,143,146,1,0,0,0,
		144,142,1,0,0,0,144,145,1,0,0,0,145,27,1,0,0,0,146,144,1,0,0,0,147,152,
		3,30,15,0,148,149,5,15,0,0,149,151,3,30,15,0,150,148,1,0,0,0,151,154,1,
		0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,29,1,0,0,0,154,152,1,0,0,0,155,
		162,3,32,16,0,156,157,5,11,0,0,157,158,3,32,16,0,158,159,5,12,0,0,159,
		161,1,0,0,0,160,156,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,
		0,0,0,163,31,1,0,0,0,164,162,1,0,0,0,165,167,7,4,0,0,166,165,1,0,0,0,166,
		167,1,0,0,0,167,168,1,0,0,0,168,169,3,4,2,0,169,33,1,0,0,0,170,171,5,7,
		0,0,171,172,5,35,0,0,172,35,1,0,0,0,14,55,64,67,81,97,104,112,120,128,
		136,144,152,162,166
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Astrolabe.Evaluator.Parser
