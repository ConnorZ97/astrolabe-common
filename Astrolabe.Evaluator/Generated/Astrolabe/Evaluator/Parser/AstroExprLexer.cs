//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/doolse/astrolabe/hvams/astrolabe-common/Astrolabe.Evaluator/AstroExpr.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Astrolabe.Evaluator.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AstroExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Number=4, LPAR=5, RPAR=6, LBRAC=7, RBRAC=8, MINUS=9, 
		PLUS=10, DOT=11, MUL=12, COMMA=13, LESS=14, MORE_=15, LE=16, GE=17, APOS=18, 
		QUOT=19, AND=20, OR=21, EQ=22, NE=23, Literal=24, Whitespace=25, Identifier=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "Number", "Digits", "LPAR", "RPAR", "LBRAC", "RBRAC", 
		"MINUS", "PLUS", "DOT", "MUL", "COMMA", "LESS", "MORE_", "LE", "GE", "APOS", 
		"QUOT", "AND", "OR", "EQ", "NE", "Literal", "Whitespace", "Letter", "LetterOrDigit", 
		"Identifier"
	};


	public AstroExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AstroExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'=>'", "'/'", "'$'", null, "'('", "')'", "'['", "']'", "'-'", "'+'", 
		"'.'", "'*'", "','", "'<'", "'>'", "'<='", "'>='", "'''", "'\"'", "'and'", 
		"'or'", "'='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Number", "LPAR", "RPAR", "LBRAC", "RBRAC", "MINUS", 
		"PLUS", "DOT", "MUL", "COMMA", "LESS", "MORE_", "LE", "GE", "APOS", "QUOT", 
		"AND", "OR", "EQ", "NE", "Literal", "Whitespace", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstroExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AstroExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,164,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,3,3,70,8,3,3,3,72,8,3,1,3,
		1,3,3,3,76,8,3,1,4,4,4,79,8,4,11,4,12,4,80,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
		1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,5,24,129,8,24,10,24,
		12,24,132,9,24,1,24,1,24,1,24,5,24,137,8,24,10,24,12,24,140,9,24,1,24,
		3,24,143,8,24,1,25,4,25,146,8,25,11,25,12,25,147,1,25,1,25,1,26,1,26,1,
		27,1,27,3,27,156,8,27,1,28,1,28,5,28,160,8,28,10,28,12,28,163,9,28,0,0,
		29,1,1,3,2,5,3,7,4,9,0,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,
		29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,
		53,0,55,0,57,26,1,0,5,1,0,34,34,1,0,39,39,3,0,9,10,13,13,32,32,3,0,65,
		90,95,95,97,122,1,0,48,57,170,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,57,
		1,0,0,0,1,59,1,0,0,0,3,62,1,0,0,0,5,64,1,0,0,0,7,75,1,0,0,0,9,78,1,0,0,
		0,11,82,1,0,0,0,13,84,1,0,0,0,15,86,1,0,0,0,17,88,1,0,0,0,19,90,1,0,0,
		0,21,92,1,0,0,0,23,94,1,0,0,0,25,96,1,0,0,0,27,98,1,0,0,0,29,100,1,0,0,
		0,31,102,1,0,0,0,33,104,1,0,0,0,35,107,1,0,0,0,37,110,1,0,0,0,39,112,1,
		0,0,0,41,114,1,0,0,0,43,118,1,0,0,0,45,121,1,0,0,0,47,123,1,0,0,0,49,142,
		1,0,0,0,51,145,1,0,0,0,53,151,1,0,0,0,55,155,1,0,0,0,57,157,1,0,0,0,59,
		60,5,61,0,0,60,61,5,62,0,0,61,2,1,0,0,0,62,63,5,47,0,0,63,4,1,0,0,0,64,
		65,5,36,0,0,65,6,1,0,0,0,66,71,3,9,4,0,67,69,5,46,0,0,68,70,3,9,4,0,69,
		68,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,67,1,0,0,0,71,72,1,0,0,0,72,
		76,1,0,0,0,73,74,5,46,0,0,74,76,3,9,4,0,75,66,1,0,0,0,75,73,1,0,0,0,76,
		8,1,0,0,0,77,79,2,48,57,0,78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,
		81,1,0,0,0,81,10,1,0,0,0,82,83,5,40,0,0,83,12,1,0,0,0,84,85,5,41,0,0,85,
		14,1,0,0,0,86,87,5,91,0,0,87,16,1,0,0,0,88,89,5,93,0,0,89,18,1,0,0,0,90,
		91,5,45,0,0,91,20,1,0,0,0,92,93,5,43,0,0,93,22,1,0,0,0,94,95,5,46,0,0,
		95,24,1,0,0,0,96,97,5,42,0,0,97,26,1,0,0,0,98,99,5,44,0,0,99,28,1,0,0,
		0,100,101,5,60,0,0,101,30,1,0,0,0,102,103,5,62,0,0,103,32,1,0,0,0,104,
		105,5,60,0,0,105,106,5,61,0,0,106,34,1,0,0,0,107,108,5,62,0,0,108,109,
		5,61,0,0,109,36,1,0,0,0,110,111,5,39,0,0,111,38,1,0,0,0,112,113,5,34,0,
		0,113,40,1,0,0,0,114,115,5,97,0,0,115,116,5,110,0,0,116,117,5,100,0,0,
		117,42,1,0,0,0,118,119,5,111,0,0,119,120,5,114,0,0,120,44,1,0,0,0,121,
		122,5,61,0,0,122,46,1,0,0,0,123,124,5,33,0,0,124,125,5,61,0,0,125,48,1,
		0,0,0,126,130,5,34,0,0,127,129,8,0,0,0,128,127,1,0,0,0,129,132,1,0,0,0,
		130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,143,
		5,34,0,0,134,138,5,39,0,0,135,137,8,1,0,0,136,135,1,0,0,0,137,140,1,0,
		0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,
		143,5,39,0,0,142,126,1,0,0,0,142,134,1,0,0,0,143,50,1,0,0,0,144,146,7,
		2,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,
		148,149,1,0,0,0,149,150,6,25,0,0,150,52,1,0,0,0,151,152,7,3,0,0,152,54,
		1,0,0,0,153,156,3,53,26,0,154,156,7,4,0,0,155,153,1,0,0,0,155,154,1,0,
		0,0,156,56,1,0,0,0,157,161,3,53,26,0,158,160,3,55,27,0,159,158,1,0,0,0,
		160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,58,1,0,0,0,163,161,
		1,0,0,0,11,0,69,71,75,80,130,138,142,147,155,161,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Astrolabe.Evaluator.Parser
