//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/doolse/astrolabe/hvams.roadmanager.server/astrolabe-common/Astrolabe.Evaluator/AstroExpr.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Astrolabe.Evaluator.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AstroExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, Number=6, LPAR=7, RPAR=8, LBRAC=9, 
		RBRAC=10, MINUS=11, PLUS=12, DOT=13, MUL=14, COMMA=15, LESS=16, MORE_=17, 
		LE=18, GE=19, APOS=20, QUOT=21, AND=22, OR=23, EQ=24, NE=25, False=26, 
		True=27, Literal=28, Whitespace=29, Identifier=30;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "Number", "Digits", "LPAR", "RPAR", 
		"LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", "COMMA", "LESS", "MORE_", 
		"LE", "GE", "APOS", "QUOT", "AND", "OR", "EQ", "NE", "False", "True", 
		"Literal", "Whitespace", "Letter", "LetterOrDigit", "Identifier"
	};


	public AstroExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AstroExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'=>'", "'?'", "':'", "'/'", "'$'", null, "'('", "')'", "'['", "']'", 
		"'-'", "'+'", "'.'", "'*'", "','", "'<'", "'>'", "'<='", "'>='", "'''", 
		"'\"'", "'and'", "'or'", "'='", "'!='", "'false'", "'true'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "Number", "LPAR", "RPAR", "LBRAC", 
		"RBRAC", "MINUS", "PLUS", "DOT", "MUL", "COMMA", "LESS", "MORE_", "LE", 
		"GE", "APOS", "QUOT", "AND", "OR", "EQ", "NE", "False", "True", "Literal", 
		"Whitespace", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstroExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AstroExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,30,187,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,1,1,1,1,2,1,
		2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,82,8,5,3,5,84,8,5,1,5,1,5,3,5,88,8,5,
		1,6,4,6,91,8,6,11,6,12,6,92,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
		1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,
		1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,28,1,28,5,28,152,8,28,10,28,12,28,155,9,28,1,28,1,28,
		1,28,5,28,160,8,28,10,28,12,28,163,9,28,1,28,3,28,166,8,28,1,29,4,29,169,
		8,29,11,29,12,29,170,1,29,1,29,1,30,1,30,1,31,1,31,3,31,179,8,31,1,32,
		1,32,5,32,183,8,32,10,32,12,32,186,9,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,
		6,13,0,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,
		37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,29,
		61,0,63,0,65,30,1,0,5,1,0,34,34,1,0,39,39,3,0,9,10,13,13,32,32,3,0,65,
		90,95,95,97,122,1,0,48,57,193,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,
		0,3,70,1,0,0,0,5,72,1,0,0,0,7,74,1,0,0,0,9,76,1,0,0,0,11,87,1,0,0,0,13,
		90,1,0,0,0,15,94,1,0,0,0,17,96,1,0,0,0,19,98,1,0,0,0,21,100,1,0,0,0,23,
		102,1,0,0,0,25,104,1,0,0,0,27,106,1,0,0,0,29,108,1,0,0,0,31,110,1,0,0,
		0,33,112,1,0,0,0,35,114,1,0,0,0,37,116,1,0,0,0,39,119,1,0,0,0,41,122,1,
		0,0,0,43,124,1,0,0,0,45,126,1,0,0,0,47,130,1,0,0,0,49,133,1,0,0,0,51,135,
		1,0,0,0,53,138,1,0,0,0,55,144,1,0,0,0,57,165,1,0,0,0,59,168,1,0,0,0,61,
		174,1,0,0,0,63,178,1,0,0,0,65,180,1,0,0,0,67,68,5,61,0,0,68,69,5,62,0,
		0,69,2,1,0,0,0,70,71,5,63,0,0,71,4,1,0,0,0,72,73,5,58,0,0,73,6,1,0,0,0,
		74,75,5,47,0,0,75,8,1,0,0,0,76,77,5,36,0,0,77,10,1,0,0,0,78,83,3,13,6,
		0,79,81,5,46,0,0,80,82,3,13,6,0,81,80,1,0,0,0,81,82,1,0,0,0,82,84,1,0,
		0,0,83,79,1,0,0,0,83,84,1,0,0,0,84,88,1,0,0,0,85,86,5,46,0,0,86,88,3,13,
		6,0,87,78,1,0,0,0,87,85,1,0,0,0,88,12,1,0,0,0,89,91,2,48,57,0,90,89,1,
		0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,14,1,0,0,0,94,95,5,
		40,0,0,95,16,1,0,0,0,96,97,5,41,0,0,97,18,1,0,0,0,98,99,5,91,0,0,99,20,
		1,0,0,0,100,101,5,93,0,0,101,22,1,0,0,0,102,103,5,45,0,0,103,24,1,0,0,
		0,104,105,5,43,0,0,105,26,1,0,0,0,106,107,5,46,0,0,107,28,1,0,0,0,108,
		109,5,42,0,0,109,30,1,0,0,0,110,111,5,44,0,0,111,32,1,0,0,0,112,113,5,
		60,0,0,113,34,1,0,0,0,114,115,5,62,0,0,115,36,1,0,0,0,116,117,5,60,0,0,
		117,118,5,61,0,0,118,38,1,0,0,0,119,120,5,62,0,0,120,121,5,61,0,0,121,
		40,1,0,0,0,122,123,5,39,0,0,123,42,1,0,0,0,124,125,5,34,0,0,125,44,1,0,
		0,0,126,127,5,97,0,0,127,128,5,110,0,0,128,129,5,100,0,0,129,46,1,0,0,
		0,130,131,5,111,0,0,131,132,5,114,0,0,132,48,1,0,0,0,133,134,5,61,0,0,
		134,50,1,0,0,0,135,136,5,33,0,0,136,137,5,61,0,0,137,52,1,0,0,0,138,139,
		5,102,0,0,139,140,5,97,0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,143,
		5,101,0,0,143,54,1,0,0,0,144,145,5,116,0,0,145,146,5,114,0,0,146,147,5,
		117,0,0,147,148,5,101,0,0,148,56,1,0,0,0,149,153,5,34,0,0,150,152,8,0,
		0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,
		156,1,0,0,0,155,153,1,0,0,0,156,166,5,34,0,0,157,161,5,39,0,0,158,160,
		8,1,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,
		0,162,164,1,0,0,0,163,161,1,0,0,0,164,166,5,39,0,0,165,149,1,0,0,0,165,
		157,1,0,0,0,166,58,1,0,0,0,167,169,7,2,0,0,168,167,1,0,0,0,169,170,1,0,
		0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,6,29,0,0,173,
		60,1,0,0,0,174,175,7,3,0,0,175,62,1,0,0,0,176,179,3,61,30,0,177,179,7,
		4,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,64,1,0,0,0,180,184,3,61,30,0,
		181,183,3,63,31,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,
		185,1,0,0,0,185,66,1,0,0,0,186,184,1,0,0,0,11,0,81,83,87,92,153,161,165,
		170,178,184,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Astrolabe.Evaluator.Parser
