@precedence {
  call,
  prefix,
  filter @left
  map @left,
  times @left,
  plus @left,
  rel @left,
  and @left,
  or @left,
  ternary @right
}

@top EvalProgram { expression }

expression[@isGroup=Expression] { 
    Reference |
    Identifier | 
    Lambda |
    @specialize[@name=BooleanLiteral]<Identifier, "true" | "false"> |
    LetExpression |
    Number | 
    String | 
    UnaryExpression | 
    BinaryExpression | 
    ParenthesizedExpression |
    ConditionalExpression {
        expression !ternary "?" expression ":" expression
    } |
    CallExpression {
        expression !call ArgList
    }
}

LetExpression { @specialize<Identifier, "let"> Reference "=" expression @specialize<Identifier, "in"> expression } 

Lambda { Reference "=>" expression }

ParenthesizedExpression { "(" expression ")" }

ArgList { "(" commaSep<expression> ")" }

commaSep<content> {
  (content ("," content)*)?
}

UnaryExpression {
  !prefix ("!" | "+" | "-")
  expression
}

BinaryExpression {
  expression !and @specialize[@name=Call]<Identifier, "and"> expression |
  expression !or @specialize[@name=Call]<Identifier, "or"> expression |
  expression !map call<"."> expression |
  expression !times (call<"/"> | call<"*">) expression |
  expression !plus (call<"+"> | call<"-">) expression |
  expression !rel (call<"<"> | call<">"> | call<"="> | call<"!="> | call<"<="> | call<">=">) expression |
  expression !filter call<"["> expression "]"
}

@skip { space }

@skip {} {
  String {
    '"' (stringContentDouble | Escape)* ('"' | "\n") |
    "'" (stringContentSingle | Escape)* ("'" | "\n")
  }
}


call<expr> { Call { expr } }
  
@tokens {

  hex { @digit | $[a-fA-F] }

  Number {
    (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
      (("e" | "E") ("+" | "-")? ("_" | @digit)+)? |
    @digit ("_" | @digit)* "n" |
    "0x" (hex | "_")+ "n"? |
    "0b" $[01_]+ "n"? |
    "0o" $[0-7_]+ "n"?
  }

  @precedence { Number "." }

  Escape {
    "\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
  }

  identifierChar { @asciiLetter | "_" }


  Identifier { identifierChar (identifierChar | @digit)* }

  Reference { "$" Identifier }

  space { @whitespace+ }

  
  stringContentSingle { ![\\\n']+ }

  stringContentDouble { ![\\\n"]+ }
}
