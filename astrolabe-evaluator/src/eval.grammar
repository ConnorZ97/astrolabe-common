@precedence {
  call,
  map @left,
  times @left,
  plus @left,
  rel @left,
  ternary @right
  filter @right
}

@top EvalProgram { expression }

expression[@isGroup=Expression] { 
    Reference |
    Identifier | 
    Number | 
    String | 
    BinaryExpression | 
    UnaryExpression | 
    ParenthesizedExpression |
    ConditionalExpression {
        expression !ternary "?" expression ":" expression
    } |
    CallExpression {
        expression !call ArgList
    }
}

ParenthesizedExpression { "(" expression ")" }

ArgList { "(" commaSep<expression> ")" }

commaSep<content> {
  (content ("," content)*)?
}

UnaryExpression {
  ("!" | "+" | "-")
  expression
}

BinaryExpression {
  expression !map call<"."> expression |
  expression !times (call<"/"> | call<"*">) expression |
  expression !plus (call<"+"> | call<"-">) expression |
  expression !rel (call<"<"> | call<">"> | call<"="> | call<"!="> | call<"<="> | call<">=">) expression |
  expression !filter call<"["> expression "]"
}

@skip { space }

call<expr> { Call { expr } }

@tokens {
  space { @whitespace+ }
  Reference { "$" Identifier }
  Identifier { $[A-Za-z_]+ }
  Number { $[0-9]+ }
  String { '"' !["]* '"' }
}
