// This file was generated by lezer-generator. You probably shouldn't edit it.
import {LRParser} from "@lezer/lr"
export const parser = LRParser.deserialize({
  version: 14,
  states: "$[OVQPOOQkQQOOOVQPO'#CgOOQO'#Cl'#ClOOQO'#Cb'#CbOOQO'#Cc'#CcOOQO'#Cd'#CdOOQO'#Ce'#CeOOQO'#Cf'#CfOVQPO,58{OVQPO,58{OVQPO,59SOVQPO,58{OVQPO,58{OVQPO,58{O!fQQO,59RO#qQQO1G.gO#{QQO1G.gO$SQQO1G.nOOQO1G.g1G.gO%XQQO1G.gO%cQQO1G.gOOQO7+$R7+$ROVQPO7+$YO%mQQO<<Gt",
  stateData: "&q~O_OS~OQRORROSROdQOeQOnQO~OaSObTOcUOdVOeWOfXOgXOhXOiXOjXOkXOlYOoZO~O]ZamZapZa~PkOaSObTOcUO]TifTigTihTiiTijTikTilTioTimTipTi~OdVOeWO~P!sOmfO~PkOpgO~PkOaSO]TidTieTifTigTihTiiTijTikTilTioTimTipTi~ObTicTi~P$ZOdTieTi~P!sOaSObTOcUOdVOeWOfXOgXOhXOiXOjXOkXOoZO][yl[ym[yp[y~O",
  goto: "!uaPPPPPbmww!Q!QbbPPP!YcROQXYZ[]^ga[P_`abdeh_]P_`abeh]^P_`abhQPOQ_QQ`XQaYQbZQc[Qd]Qe^Rhg",
  nodeNames: "âš  EvalProgram Identifier Number String BinaryExpression Call Call Call Call Call UnaryExpression ConditionalExpression",
  maxTerm: 32,
  nodeProps: [
    ["group", -6,2,3,4,5,11,12,"Expression"]
  ],
  skippedNodes: [0],
  repeatNodeCount: 0,
  tokenData: "&p~RlX^!ypq!yqr#nrs#{z{$j{|$o}!O$t!O!P$y!P!Q%O!Q![%T![!]%]!^!_%b!_!`%o!`!a%t!a!b&R!c!}&W!}#O&f#P#Q&k#R#S&W#T#o&W#y#z!y$f$g!y#BY#BZ!y$IS$I_!y$I|$JO!y$JT$JU!y$KV$KW!y&FU&FV!y~#OY_~X^!ypq!y#y#z!y$f$g!y#BY#BZ!y$IS$I_!y$I|$JO!y$JT$JU!y$KV$KW!y&FU&FV!yR#sPnP!_!`#vQ#{OiQ~$OTOr#{rs$_s;'S#{;'S;=`$d<%lO#{~$dOS~~$gP;=`<%l#{~$oOc~~$tOd~~$yOe~~%OOa~~%TOb~~%YPR~!Q![%T~%bOp~~%gPf~!_!`%j~%oOj~~%tOh~~%yPg~!_!`%|~&ROk~~&WOo~~&]RQ~!c!}&W#R#S&W#T#o&W~&kOl~~&pOm~",
  tokenizers: [0, 1],
  topRules: {"EvalProgram":[0,1]},
  tokenPrec: 0
})
