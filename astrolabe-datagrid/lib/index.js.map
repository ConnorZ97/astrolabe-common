{"version":3,"file":"index.js","sources":["../src/columns.tsx","../src/DataGrid.tsx","../src/columnBuilder.tsx"],"sourcesContent":["import React, {\n  CSSProperties,\n  Fragment,\n  Key,\n  ReactElement,\n  ReactNode,\n} from \"react\";\n\nexport type Sortable = string | number | undefined | null | boolean | Date;\n\nexport type SortDirection = \"asc\" | \"desc\";\n\nexport interface ColumnHeader {\n  id: string;\n  title: string;\n  columnTemplate?: string;\n  columnContainerStyles?: CSSProperties;\n  hidden?: boolean;\n  filterField?: string;\n  sortField?: string;\n  defaultSort?: SortDirection;\n  cellClass?: string;\n  headerCellClass?: string;\n  bodyCellClass?: string;\n}\n\nexport type ColumnRenderer<T, D> = (\n  row: T,\n  rowIndex: number,\n  col: ColumnDef<any, D>,\n) => ReactNode;\n\nexport interface CellRenderProps<T, D> {\n  key: Key;\n  row: T;\n  column: ColumnDef<any, D>;\n  className: string;\n  rowNum: number;\n  rowSpan: number;\n  lastColumn: boolean;\n  children: ReactNode;\n}\n\nexport interface ColumnRender<T, D = undefined> extends ColumnHeader {\n  render: ColumnRenderer<T, D>;\n  data?: D;\n  renderBody?: (cell: CellRenderProps<T, D>) => ReactElement;\n  renderHeader?: (cell: CellRenderProps<number, D>) => ReactElement;\n}\n\nexport interface ColumnDef<T, D = undefined> extends ColumnRender<T, D> {\n  compare?: (first: T, second: T) => number;\n  getter?: (row: T) => Sortable;\n  filterValue?: (row: T) => [string, string];\n  children?: ColumnDef<T, D>[];\n  getRowSpan?: (row: T) => number | [number, boolean];\n  headerRowSpans?: number[];\n}\n\nexport function isColumnGroup(c: ColumnDef<any, any>) {\n  return !!c.children;\n}\n\nexport interface RenderHeaderRowProps<T> {\n  rowIndex: number;\n  totalRows: number;\n  gridRowOffset: number;\n  makeClassName: (column: ColumnDef<T, any>, lastColumn: boolean) => string;\n  headerContents: (column: ColumnDef<any, any>) => ReactNode;\n}\n\nexport function renderHeaderCells<T>(\n  headerRowProps: RenderHeaderRowProps<T>,\n  column: ColumnDef<T, any>,\n  lastColumn: boolean,\n): ReactElement[] | ReactElement {\n  const { rowIndex, gridRowOffset, totalRows, makeClassName } = headerRowProps;\n  const rowSpan = column.headerRowSpans\n    ? column.headerRowSpans[rowIndex] ?? 0\n    : rowIndex === totalRows - 1\n    ? 1\n    : 0;\n  if (rowSpan === 0) return [];\n  const className = makeClassName(column, lastColumn);\n  const rowNum = rowIndex + gridRowOffset;\n  const children = column.children\n    ? visibleChildren(column.children).flatMap((c, i, arr) =>\n        renderHeaderCells(\n          headerRowProps,\n          c,\n          lastColumn && i === arr.length - 1,\n        ),\n      )\n    : headerRowProps.headerContents(column);\n  return (column.renderHeader ?? defaultRenderCell)({\n    row: rowIndex,\n    rowNum,\n    className,\n    lastColumn,\n    column,\n    rowSpan,\n    children,\n    key: rowIndex + \"_\" + column.id,\n  });\n}\n\nexport interface RenderRowProps<T> {\n  row: T;\n  rowKey: Key;\n  rowIndex: number;\n  totalRows: number;\n  gridRowOffset: number;\n  makeClassName: (\n    column: ColumnDef<T, any>,\n    lastRow: boolean,\n    lastColumn: boolean,\n  ) => string;\n  wrap?: (render: () => ReactNode) => ReactNode;\n}\n\nexport function renderBodyCells<T>(\n  rowProps: RenderRowProps<T>,\n  column: ColumnDef<T, any>,\n  lastColumn: boolean,\n): ReactElement[] | ReactElement {\n  const { row, rowKey, rowIndex, totalRows, makeClassName, gridRowOffset } =\n    rowProps;\n  const customSpan = column.getRowSpan?.(row);\n  const [rowSpan, lastRow] = Array.isArray(customSpan)\n    ? customSpan\n    : ((span: number) => [span, rowIndex + span >= totalRows])(customSpan ?? 1);\n  if (rowSpan === 0) return [];\n  const className = makeClassName(column, lastRow, lastColumn);\n  const rowNum = rowIndex + gridRowOffset;\n  const doRender = () => column.render(row, rowIndex, column);\n  const children = column.children\n    ? visibleChildren(column.children).flatMap((c, i, arr) =>\n        renderBodyCells(rowProps, c, lastColumn && i === arr.length - 1),\n      )\n    : rowProps.wrap?.(doRender) ?? doRender();\n  return (column.renderBody ?? defaultRenderCell)({\n    row,\n    rowNum,\n    className,\n    lastColumn,\n    column,\n    rowSpan,\n    children,\n    key: rowKey + \"_\" + column.id,\n  });\n}\n\nexport function defaultRenderCell(\n  {\n    className,\n    children,\n    key,\n    column,\n    rowNum,\n    rowSpan,\n    forceCell,\n  }: {\n    column: ColumnDef<any, any>;\n    className?: string;\n    children: ReactNode;\n    key: Key;\n    rowNum: number;\n    rowSpan: number;\n    forceCell?: boolean;\n  },\n  style?: CSSProperties,\n): ReactElement {\n  if (!className && !forceCell && isColumnGroup(column))\n    return <Fragment key={key}>{children}</Fragment>;\n  const gridStyle = gridAreaStyles(column, rowNum, rowSpan, forceCell);\n  return (\n    <div key={key} style={{ ...style, ...gridStyle }} className={className}>\n      {children}\n    </div>\n  );\n}\n\nexport function visibleChildren<T, D>(\n  c: ColumnDef<T, D>[],\n): ColumnDef<any, D>[] {\n  return c.filter((x) => !x.hidden);\n}\n\nexport function gridAreaStyles(\n  col: ColumnDef<any, any>,\n  rowNum: number,\n  rowSpan: number,\n  forceCell?: boolean,\n): CSSProperties {\n  if (!forceCell && isColumnGroup(col)) return { display: \"contents\" };\n  return {\n    ...gridColumnStyle(col.id, col.id, true),\n    gridRowStart: rowNum,\n    gridRowEnd: \"span \" + rowSpan,\n  };\n}\n\nexport function gridColumnAreaStyles(\n  colLineStart: string,\n  colLineEnd: string,\n  rowNum: number,\n  rowSpan: number,\n  inclusive?: boolean,\n) {\n  return {\n    ...gridColumnStyle(colLineStart, colLineEnd, inclusive),\n    gridRowStart: rowNum,\n    gridRowEnd: \"span \" + rowSpan,\n  };\n}\n\nexport function gridColumnStyle(\n  startCol: string,\n  endCol: string,\n  inclusive?: boolean,\n): {\n  gridColumnStart: string;\n  gridColumnEnd: string;\n} {\n  return {\n    gridColumnStart: getColumnLineName(startCol, true),\n    gridColumnEnd: getColumnLineName(endCol, !inclusive),\n  };\n}\n\nfunction getColumnLineName(id: string, start: boolean) {\n  return `c${id.replaceAll(\" \", \"_\")}_${start ? \"s\" : \"e\"}`;\n}\n\nexport function getColumnTemplate(\n  cols: ColumnDef<any, any>[],\n  defaultColumnTemplate: string,\n): string {\n  const [columnTemplate, lines] = cols.reduce(\n    (acc, c) => addColumnTemplate(c, defaultColumnTemplate, acc),\n    [\"\", [] as string[]],\n  );\n  return columnTemplate + \" \" + writeLineNames(lines);\n}\n\nexport function getContainerStyles(cols: ColumnDef<any, any>[]): CSSProperties {\n  return cols.reduce((acc, c) => {\n    const childStyles = c.children\n      ? getContainerStyles(visibleChildren(c.children))\n      : {};\n    return mergeCss(mergeCss(acc, c.columnContainerStyles), childStyles);\n  }, {} as CSSProperties);\n}\n\nfunction mergeCss(acc: CSSProperties, other?: CSSProperties) {\n  if (other) {\n    const overrideCounter =\n      other.counterReset && acc.counterReset\n        ? other.counterReset + \" \" + acc.counterReset\n        : \"\";\n    Object.assign(acc, other);\n    if (overrideCounter) {\n      acc.counterReset = overrideCounter;\n    }\n  }\n  return acc;\n}\n\nfunction writeLineNames(names: string[]) {\n  return \"[\" + names.join(\" \") + \"]\";\n}\nfunction addColumnTemplate<T>(\n  col: ColumnDef<T, any>,\n  defaultColumnTemplate: string,\n  [current, lineNames]: [string, string[]],\n): [string, string[]] {\n  if (col.children) {\n    const [nextCurrent, nextLines] = visibleChildren(col.children).reduce(\n      (acc, c) => addColumnTemplate(c, defaultColumnTemplate, acc),\n      [current, [...lineNames, getColumnLineName(col.id, true)]],\n    );\n    return [nextCurrent, [...nextLines, getColumnLineName(col.id, false)]];\n  }\n  const templateString = col.columnTemplate ?? defaultColumnTemplate;\n  return [\n    current +\n      \" \" +\n      writeLineNames([...lineNames, getColumnLineName(col.id, true)]) +\n      \" \" +\n      templateString,\n    [getColumnLineName(col.id, false)],\n  ];\n}\n\nexport function maxHeaderRowsForCols(\n  cols: ColumnDef<any, any>[],\n  current: number,\n): number {\n  return cols.reduce((a, n) => Math.max(a, maxHeaderRows(n)), current);\n}\n\nexport function maxHeaderRows(c: ColumnDef<any, any>): number {\n  const thisHeaders = c.headerRowSpans?.length ?? 1;\n  return c.children\n    ? maxHeaderRowsForCols(visibleChildren(c.children), thisHeaders)\n    : thisHeaders;\n}\n\nexport function mapColumns<T, T2, D>(\n  cols: ColumnDef<T, D>[],\n  map: (from: T2) => T,\n  getRowSpan?: (from: T2) => number | [number, boolean],\n): ColumnDef<T2, D>[] {\n  return cols.map((x) => ({\n    ...x,\n    render: (row: T2, rowIndex: number, col: ColumnDef<any, D>) =>\n      x.render(map(row), rowIndex, col),\n    compare: x.compare ? (f, s) => x.compare!(map(f), map(s)) : undefined,\n    getter: x.getter ? (r) => x.getter!(map(r)) : undefined,\n    filterValue: x.filterValue ? (r) => x.filterValue!(map(r)) : undefined,\n    children: x.children ? mapColumns(x.children, map) : undefined,\n    getRowSpan:\n      getRowSpan ?? (x.getRowSpan ? (r) => x.getRowSpan!(map(r)) : undefined),\n    renderBody: x.renderBody\n      ? (props) => x.renderBody!({ ...props, row: map(props.row) })\n      : undefined,\n  }));\n}\n","import React, {\n  CSSProperties,\n  Key,\n  ReactElement,\n  ReactNode,\n  useMemo,\n} from \"react\";\nimport clsx from \"clsx\";\nimport {\n  ColumnDef,\n  getColumnTemplate,\n  getContainerStyles,\n  isColumnGroup,\n  maxHeaderRowsForCols,\n  renderBodyCells,\n  renderHeaderCells,\n  RenderHeaderRowProps,\n  RenderRowProps,\n} from \"./columns\";\n\nexport interface DataGridClasses {\n  className?: string;\n  headerCellClass?: string;\n  lastRowClass?: string;\n  lastColumnClass?: string;\n  cellClass?: string;\n  bodyCellClass?: string;\n  defaultColumnTemplate?: string;\n}\n\nexport const defaultTableClasses: DataGridClasses = {\n  headerCellClass: \"font-bold\",\n  cellClass: \"px-1\",\n  bodyCellClass: \"border-t py-1 flex items-center\",\n};\n\nexport interface DataGridProps<T, D = unknown> extends DataGridClasses {\n  columns: ColumnDef<T, D>[];\n  bodyRows: number;\n  getBodyRow(index: number): T;\n  extraHeaderRows?: ReactElement[];\n  wrapBodyContent?: (render: () => ReactNode) => ReactNode;\n  renderHeaderContent?: (col: ColumnDef<any, any>) => ReactNode;\n  renderExtraRows?: (rowNum: number) => ReactElement;\n  wrapBodyRow?: (\n    rowIndex: number,\n    render: (rowData: T, key: Key) => ReactNode,\n  ) => ReactNode;\n  wrapHeaderRow?: (\n    headerRowIndex: number,\n    render: () => ReactNode,\n  ) => ReactNode;\n  style?: CSSProperties;\n}\n\nexport function DataGrid<T, D = unknown>(props: DataGridProps<T, D>) {\n  const {\n    style,\n    className,\n    headerCellClass,\n    lastColumnClass,\n    cellClass,\n    bodyCellClass,\n    columns,\n    wrapHeaderRow,\n    defaultColumnTemplate = \"auto\",\n    bodyRows,\n    getBodyRow,\n    lastRowClass,\n    renderHeaderContent,\n    wrapBodyContent,\n    extraHeaderRows = [],\n    renderExtraRows,\n    wrapBodyRow,\n  } = { ...defaultTableClasses, ...props };\n\n  const visibleColumns = useMemo(\n    () => columns.filter((c) => !c.hidden),\n    [columns],\n  );\n  const lastColIndex = visibleColumns.length - 1;\n  const totalHeaderRows = maxHeaderRowsForCols(visibleColumns, 1);\n  const headerOffset = extraHeaderRows.length + 1;\n  const headerCells = Array.from({ length: totalHeaderRows }).flatMap(\n    (_, rowIndex) => {\n      const doRender = () => {\n        const rowProps: RenderHeaderRowProps<T> = {\n          totalRows: totalHeaderRows,\n          rowIndex,\n          makeClassName: makeHeaderClass,\n          gridRowOffset: headerOffset,\n          headerContents: renderHeaderContent ?? ((c) => c.title),\n        };\n        return visibleColumns.flatMap((c, cIndex) =>\n          renderHeaderCells(rowProps, c, cIndex === lastColIndex),\n        );\n      };\n      return wrapHeaderRow?.(rowIndex, doRender) ?? doRender()[0];\n    },\n  );\n\n  const gridTemplateColumns = getColumnTemplate(\n    visibleColumns,\n    defaultColumnTemplate,\n  );\n\n  const containerStyles = getContainerStyles(visibleColumns);\n\n  const bodyRowOffset = headerOffset + totalHeaderRows;\n  const cells = Array.from({ length: bodyRows }).flatMap((_, rowIndex) => {\n    const doRender = (row: T, rowKey: Key) => {\n      const rowProps: RenderRowProps<T> = {\n        row,\n        rowIndex,\n        makeClassName: makeBodyClass,\n        gridRowOffset: bodyRowOffset,\n        wrap: wrapBodyContent,\n        totalRows: bodyRows,\n        rowKey,\n      };\n      return visibleColumns.flatMap((c, cIndex) =>\n        renderBodyCells(rowProps, c, cIndex === lastColIndex),\n      );\n    };\n    return (\n      wrapBodyRow?.(rowIndex, doRender) ??\n      doRender(getBodyRow(rowIndex), rowIndex)\n    );\n  });\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns,\n        ...containerStyles,\n        ...style,\n      }}\n      className={className}\n    >\n      {extraHeaderRows}\n      {headerCells}\n      {cells}\n      {renderExtraRows?.(bodyRowOffset + bodyRows)}\n    </div>\n  );\n\n  function makeBodyClass(\n    column: ColumnDef<T, any>,\n    lastRow: boolean,\n    lastColumn: boolean,\n  ) {\n    if (isColumnGroup(column))\n      return clsx(column.bodyCellClass, column.cellClass);\n    return clsx(\n      column.bodyCellClass,\n      column.cellClass,\n      bodyCellClass,\n      cellClass,\n      lastRow && lastRowClass,\n      lastColumn && lastColumnClass,\n    );\n  }\n\n  function makeHeaderClass(column: ColumnDef<T, any>, lastColumn: boolean) {\n    if (isColumnGroup(column))\n      return clsx(column.headerCellClass, column.cellClass);\n    return clsx(\n      column.headerCellClass,\n      column.cellClass,\n      headerCellClass,\n      cellClass,\n      lastColumn && lastColumnClass,\n    );\n  }\n}\n","import { ColumnDef, ColumnRenderer, Sortable } from \"./columns\";\n\ntype IdOrTitle =\n  | { title: string; id?: string }\n  | { id: string; title?: string };\n\ntype FilterField<T> = {\n  filterField: string;\n  filterValue: (row: T) => [string, string];\n};\n\ninterface GetterColumn<T, D> {\n  getter: (row: T) => Sortable;\n  render?: ColumnRenderer<T, D>;\n  filterField?: string;\n  filterValue?: (row: T) => [string, string];\n}\n\ntype ColumnRenderInit<T, D> =\n  | GetterColumn<T, D>\n  | ({\n      render: ColumnRenderer<T, D>;\n    } & (FilterField<T> | {}))\n  | {\n      children: ColumnDefInit<T, D>[] | ColumnDef<T, D>;\n      render?: ColumnRenderer<T, D>;\n    };\n\n/**\n * Represents the initialization properties for a `ColumnDef` object.\n *\n * @template T The type of the row data.\n * @template D The type of the additional data passed to the `CellRenderer`.\n */\nexport type ColumnDefInit<T, D = undefined> = IdOrTitle &\n  ColumnRenderInit<T, D> &\n  Omit<ColumnDef<T, D>, \"id\" | \"title\" | \"filterField\" | \"render\">;\nexport function initColumn<T, D = undefined>(\n  x: ColumnDefInit<T, D>,\n  i?: number,\n): ColumnDef<T, D> {\n  const render: ColumnRenderer<T, D> =\n    \"render\" in x\n      ? x.render!\n      : \"children\" in x\n      ? () => <></>\n      : (r: T) => (x as GetterColumn<T, D>).getter(r)?.toString();\n  const columnDef: ColumnDef<T, D> = {\n    ...x,\n    id: x.id ?? (x.title ? x.title : i?.toString() ?? \"0\"),\n    title: x.title ?? \"\",\n    render,\n    children:\n      \"children\" in x\n        ? x.children\n          ? columnDefinitions(...x.children)\n          : undefined\n        : undefined,\n  };\n  if (columnDef.sortField && !columnDef.compare) {\n    const getter = columnDef.getter;\n    if (!getter) throw new Error(\"Must supply getter or compare for sortField\");\n    {\n      columnDef.compare = (f: T, s: T) => compareAny(getter(f), getter(s));\n    }\n  }\n  if (columnDef.filterField && !columnDef.filterValue) {\n    const getter = columnDef.getter;\n    if (!getter)\n      throw new Error(\"Must supply getter or compare for filterField\");\n    {\n      columnDef.filterValue = getterToFilter(getter);\n    }\n  }\n  return columnDef;\n}\n\n/**\n * Returns an array of `ColumnDef` objects based on the provided `ColumnDefInit` objects.\n *\n * @template T The type of the row data.\n * @template D The type of the additional data passed to the `CellRenderer`.\n * @param {...ColumnDefInit<T, D>[]} defs The `ColumnDefInit` objects to use to create the `ColumnDef` objects.\n * @returns {ColumnDef<T, D>[]} An array of `ColumnDef` objects.\n */\nexport function columnDefinitions<T, D = undefined>(\n  ...defs: ColumnDefInit<T, D>[]\n): ColumnDef<T, D>[] {\n  return defs.map(initColumn);\n}\n\n/**\n * Converts a getter function that returns a `Sortable` value to a filter function that returns a tuple of strings.\n *\n * @template T The type of the row data.\n * @param {(row: T) => Sortable} getter The getter function to convert to a filter function.\n * @returns {(row: T) => [string, string]} A filter function that returns a tuple of strings.\n */\nexport function getterToFilter<T>(\n  getter: (row: T) => Sortable,\n): (row: T) => [string, string] {\n  return (r) => {\n    const v = getter(r);\n    if (typeof v === \"string\") {\n      return [v, v];\n    }\n    if (v === null || v === undefined) {\n      return [\"\", \"<Empty>\"];\n    }\n    const sv = v.toString();\n    return [sv, sv];\n  };\n}\n\nexport function compareAny(first: any, second: any): number {\n  return first === second ? 0 : first > second ? 1 : -1;\n}\n"],"names":["isColumnGroup","c","children","renderHeaderCells","headerRowProps","column","lastColumn","_column$headerRowSpan","_column$renderHeader","rowIndex","gridRowOffset","totalRows","makeClassName","rowSpan","headerRowSpans","className","rowNum","visibleChildren","flatMap","i","arr","length","headerContents","renderHeader","defaultRenderCell","row","key","id","renderBodyCells","rowProps","_rowProps$wrap","_column$renderBody","rowKey","customSpan","getRowSpan","_ref","Array","isArray","span","lastRow","doRender","render","wrap","renderBody","_ref2","style","forceCell","React","createElement","Fragment","gridStyle","gridAreaStyles","_extends","filter","x","hidden","col","display","gridColumnStyle","gridRowStart","gridRowEnd","gridColumnAreaStyles","colLineStart","colLineEnd","inclusive","startCol","endCol","gridColumnStart","getColumnLineName","gridColumnEnd","start","replaceAll","getColumnTemplate","cols","defaultColumnTemplate","_cols$reduce","reduce","acc","addColumnTemplate","columnTemplate","lines","writeLineNames","getContainerStyles","childStyles","mergeCss","columnContainerStyles","other","overrideCounter","counterReset","Object","assign","names","join","_ref3","_col$columnTemplate","current","lineNames","_visibleChildren$redu","concat","nextCurrent","nextLines","templateString","maxHeaderRowsForCols","a","n","Math","max","maxHeaderRows","_c$headerRowSpans$len","_c$headerRowSpans","thisHeaders","mapColumns","map","compare","f","s","undefined","getter","r","filterValue","props","defaultTableClasses","headerCellClass","cellClass","bodyCellClass","DataGrid","_defaultTableClasses$","lastColumnClass","columns","wrapHeaderRow","_defaultTableClasses$2","bodyRows","getBodyRow","lastRowClass","renderHeaderContent","wrapBodyContent","_defaultTableClasses$3","extraHeaderRows","renderExtraRows","wrapBodyRow","visibleColumns","useMemo","lastColIndex","totalHeaderRows","headerOffset","headerCells","from","_","_wrapHeaderRow","makeHeaderClass","title","cIndex","gridTemplateColumns","containerStyles","bodyRowOffset","cells","_wrapBodyRow","makeBodyClass","clsx","initColumn","_x$id","_i$toString","_x$title","_x$getter","toString","columnDef","columnDefinitions","apply","sortField","Error","compareAny","filterField","getterToFilter","slice","call","arguments","v","sv","first","second"],"mappings":"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"}